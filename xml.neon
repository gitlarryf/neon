/*
 *  File: xml
 *
 *  Provides functions for working with Xml files.
 */
IMPORT file
IMPORT math
IMPORT string

EXPORT parse
EXPORT Document
EXPORT NodeType
EXPORT Node
EXPORT Attributes
EXPORT loadFromFile

/*
 *  Exception: XmlParseException
 *
 *  Indicates malformed Xml that was unable to be parsed into Document format.
 */
EXPORT EXCEPTION XmlParseException

LET NameCharacters: Array<String> := [
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]

-- The following section is for encoding and decoding Xml Entities, and is only setup for the basics, currently.
-- TODO: implement full Entity support.
LET EntityName: Array<String> := [
    /*  0*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /* 32*/ "", "", "quot", "", "", "", "amp", "apos", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "lt", "", "gt", "",
    /* 64*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /* 96*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /*128*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /*160*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /*192*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    /*224*/ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
]

VAR line: Number := 0
TYPE EntityTable IS Dictionary<String>

FUNCTION CreateEntityTable(): EntityTable
    VAR e: EntityTable := {}
    FOR c := 0 TO 255 DO
        IF EntityName[c] <> "" THEN
            e[EntityName[c]] := string.fromCodePoint(c)
            --print("\(c): \(e[EntityName[c]]) is set to \(string.fromCodePoint(c))")
        END IF
    END FOR
    --IMPORT sys sys.exit(0)
    RETURN e
END FUNCTION

LET Entities: EntityTable := CreateEntityTable()

FUNCTION toHex(val: Number, minLength: Number DEFAULT 1): String
    VAR value: Number := val
    VAR r: String := ""

    REPEAT
        VAR digit: Number := value MOD 16
        value := math.floor(value / 16)
        IF digit >= 10 THEN
            r := string.fromCodePoint((digit + string.toCodePoint("A") - 10)) & r
        ELSE
            r := str(digit) & r
        END IF
    UNTIL value <= 0
    IF r.length() < minLength THEN
        FOR x := r.length() TO minLength - r.length() DO
            r := "0" & r
        END FOR
    END IF
    RETURN r
END FUNCTION

FUNCTION Encode(s: String): String
    VAR r: String := ""
    --VAR x: Number := 0

    --WHILE x < s.length()-1 DO
    FOREACH x IN s[FIRST TO LAST] DO
        --LET c: Number := string.toCodePoint(s[x])
        LET c: Number := string.toCodePoint(x)
        IF EntityName[c] <> "" THEN
            r.append("&\(EntityName[c]);")
        ELSIF ((c < 0x20 AND c <> 0x9 AND c <> 0xa AND c <> 0xd) OR c > 0x7F) THEN
            r.append("&#\(c);")
        ELSE
            r.append(x)
        END IF
        --INC x
    --END WHILE
    END FOREACH
    RETURN r
END FUNCTION

FUNCTION Decode(s: String): String
    VAR r: String := ""
    VAR x: Number := 0

    WHILE (x <> s.length() AND s[x] <> "") DO
        IF s[x] = "\r" THEN
            -- ignore
            INC x
        ELSIF s[x] = "\n" THEN
            r.append("\r\n") -- Normalize line endings
            INC x
        ELSIF s[x] = "&" THEN
            VAR e: Number := x
            WHILE e <> s.length() DO
                IF s[e] = ";" THEN
                    EXIT WHILE
                END IF
                INC e
            END WHILE
            IF s[x + 1 TO e - 1] IN Entities THEN
                r.append(Entities[s[x + 1 TO e - 1]])
                x := e + 1
            ELSIF s[x+1] = "#" THEN
                x := x + 2
                VAR c: Number := 0
                WHILE isdigit(s[x]) DO
                    c := c * 10 + (string.toCodePoint(s[x]) - 0x30)
                    INC x
                END WHILE
                IF s[x] = ";" THEN
                    INC x
                END IF
                r.append(string.fromCodePoint(c))
            ELSE
                r.append(s[x])
                INC x
            END IF
        ELSE
            r.append(s[x])
            INC x
        END IF
    END WHILE
    print("Decoded: \(r)")
    RETURN r
END FUNCTION

-- The following code is all dedicated to Xml parsing and handling.

/*
 *  Type: NodeType
 *
 *  Represents the node type of an Xml Element stored in a Node.
 */
TYPE NodeType IS ENUM
    Nothing
    Literal
    Element
    Text
END ENUM

/*
 *  Type: Attributes
 *
 *  Represents Attributes of an Xml Element.
 */
TYPE Attributes IS Dictionary<String>

/*
 *  Type: Node
 *
 *  Represents an Xml node, including Elements, Nodes, and Literal Text.
 */
TYPE Node IS RECORD
    type: NodeType
    name: String
    xml: String
    text: String
    attributes: Attributes
    children: Array<Node>
END RECORD

/*
 *  Type: Document
 *
 *  Represents an Xml document.
 */
TYPE Document IS RECORD
    root: Node
END RECORD

/*
 *  Function: createNode
 *
 *  Creates a new Xml Node.
 */
FUNCTION createNode(t: NodeType): Node
    RETURN Node(type WITH t)
END FUNCTION

/*
 *  Function: createElement
 *
 *  Creates a Node that represents an Xml Element document node.
 */
FUNCTION createElement(name: String, attrib: Attributes): Node
    RETURN Node(type        WITH NodeType.Element,
                name        WITH name,
                attributes  WITH attrib)
END FUNCTION

/*
 *  Function: createText
 *
 *  Creates a Node that represents an Xml Text document node.
 */
FUNCTION createText(text: String): Node
    RETURN Node(type    WITH NodeType.Text,
                text    WITH text)
END FUNCTION

/*
 *  Function: getElements
 *
 *  Gets all elements below the element that matches a certain name.
 *
 */
FUNCTION Node.getElements(self: Node, name: String): Array<Node>
    VAR elms: Array<Node> := []

    FOREACH c IN self.children DO
        IF c.type = NodeType.Element THEN
            IF c.name = name THEN
                elms.append(c)
            END IF
        END IF
    END FOREACH
    RETURN elms
END FUNCTION

FUNCTION Document.toString(self: Document): String
    RETURN self.root.toString()
END FUNCTION

/*
 *  Function: toString
 *
 *  Returns a String representing the text version
 *  of the Xml Node, including any attributes provided
 *  on that node, and all the children below that node.
 */
FUNCTION Node.toString(self: Node, indentLevel: Number DEFAULT 0): String
--FUNCTION Node.toString(self: Node, indentLevel: Number): String
--FUNCTION Node.toString(self: Node): String
    FUNCTION indent(level: Number): String
        VAR r: String := ""
        FOR i := 0 TO level DO
            r.append("\t")
        END FOR
        RETURN r
    END FUNCTION

    VAR at: Number := 0
    IF self.type = NodeType.Element THEN
        VAR r: String := "<"
        r.append(self.name)

        FOREACH a IN self.attributes.keys() DO
            r.append(" \(a)=\"\(Encode(self.attributes[a]))\"")
        END FOREACH

        IF self.children.size() = 0 THEN
            r.append(" />\n")
        ELSE
            r.append(">\n")
            FOREACH n IN self.children DO
                r.append(indent(indentLevel) & n.toString(indentLevel+1))
                --r.append(n.toString())
            END FOREACH
            r.append("</\(self.name)>\n")
        END IF
        RETURN r
    ELSIF self.type = NodeType.Text THEN
        RETURN Encode(self.text)
    ELSIF self.type = NodeType.Literal THEN
        RETURN self.xml
    END IF
    RETURN ""
END FUNCTION

/* FUNCTION Node.toString(self: Node): String
    VAR r: String := "Parent\n------\n"
    r := "Type: \(self.type)\n"
    r.append("Name: \(self.name)\n")
    r.append("Xml: \(self.xml)\n")
    FOREACH c IN self.children INDEX i DO
        r.append("ChildNode \(i): \(c)")
    END FOREACH
    RETURN r
END FUNCTION
 */
FUNCTION Node.innerText(self: Node): String
    FOREACH n IN self.children DO
        IF n.type = NodeType.Element THEN
            LET it: String := n.innerText()
            IF it <> "" THEN
                RETURN it
            END IF
        END IF
        IF n.type = NodeType.Text THEN
            RETURN n.text
        END IF
    END FOREACH
    RETURN ""
END FUNCTION

FUNCTION Node.LocalName(self: Node): String
    FOREACH c IN self.children DO
        IF c.type = NodeType.Element THEN
            RETURN c.name
        END IF
    END FOREACH
    RETURN self.name
END FUNCTION

FUNCTION Node.InnerXml(self: Node): String
    FOREACH c IN self.children DO
        IF c.type = NodeType.Text THEN
            RETURN c.toString(0)
        END IF
    END FOREACH
    RETURN ""
END FUNCTION

LET whiteSpace: Array<String> := [" ", "\t", "\r", "\n"]
LET quotes: Array<String> := ["\"", "'"]

/* Below are string helper functions for parsing Xml files. */
FUNCTION eatWhiteSpace(s: String, INOUT x: Number)
    WHILE (x < s.length()-1 AND s[x] IN [" ", "\t", "\r", "\n"]) DO
        IF s[x] IN ["\r", "\n"] THEN
            INC line
        END IF
        INC x 
    END WHILE
END FUNCTION

FUNCTION eatByteOrderMarks(s: String, INOUT x: Number)
    WHILE (x < s.length()-1 AND s[x] IN ["\uFEFF"]) DO 
        INC x 
    END WHILE
END FUNCTION

/* FUNCTION alpha(): Array<String>
    RETURN ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",]
END FUNCTION

FUNCTION alphanumeric(): Array<String>
    RETURN ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
END FUNCTION

FUNCTION numeric(): Array<String>
    RETURN ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "."]
END FUNCTION

FUNCTION whitespace(): Array<String>
    RETURN [" ", "\t", "\r", "\n"]
END FUNCTION

FUNCTION quotes(): Array<String>
    RETURN ["\""]
END FUNCTION
*/
FUNCTION isspace(s: String): Boolean
    RETURN s[0] IN [" ", "\t", "\r", "\n"]
END FUNCTION

FUNCTION isalnum(s: String): Boolean
    RETURN "0" <= s[0] <= "9" OR "A" <= s[0] <= "Z" OR "a" <= s[0] <= "z"
END FUNCTION

FUNCTION isalpha(s: String): Boolean
    RETURN "A" <= s[0] <= "Z" OR "a" <= s[0] <= "z"
END FUNCTION

FUNCTION isdigit(s: String): Boolean
    RETURN "0" <= s[0] <= "9"
END FUNCTION

FUNCTION isinitialnamechar(s: String): Boolean
    RETURN (isalpha(s[0]) OR s[0] = "_" OR s[0] = ":")
END FUNCTION

FUNCTION isnamechar(s: String): Boolean
    RETURN (isalnum(s[0]) OR s[0] = "." OR s[0] = "-" OR s[0] = "_" OR s[0] = ":")
END FUNCTION
/* End string helper functions. */

FUNCTION ParseAttributes(s: String, INOUT x: Number): Attributes
    VAR attrs: Attributes := {}

    LOOP
        eatWhiteSpace(s, INOUT x)

        IF NOT isinitialnamechar(s[x]) THEN
            RETURN attrs
        END IF

        VAR p: Number := x

        WHILE isnamechar(s[x]) DO INC x END WHILE

        VAR name: String := s[p TO x-1]

        eatWhiteSpace(s, INOUT x)

        VAR value: String := ""

        IF s[x] = "=" THEN
            INC x

            eatWhiteSpace(s, INOUT x)

            IF s[x] <> "\"" AND s[x] <> "'" THEN
                RAISE XmlParseException("Opening '\"' expected on line \(line) offset: \(x)")
            END IF
            INC x
            p := x

            WHILE (x < s.length() AND (s[x] NOT IN quotes)) DO INC x END WHILE

            IF s[x] NOT IN quotes THEN
                RAISE XmlParseException("Unexpected end of file/data found while parsing Xml.")
            END IF

            value := Decode(s[p TO x-1])
            INC x
        END IF
        attrs[name] := value
    END LOOP
END FUNCTION

FUNCTION ParseComment(s: String, INOUT x: Number)
    LET cstart: Number := x
    WHILE x < s.length() AND s[x TO x+1] <> "--" DO
        WHILE s[x TO x+1] <> "--" DO INC x END WHILE
    END WHILE
    print("Ignored Comment: \(s[cstart TO x])")
END FUNCTION

FUNCTION ParseNode(s: String, parent: String, INOUT x: Number): Node
    IF s[x] = "<" THEN
        INC x

        IF s[x] = "!" THEN
            ParseComment(s, INOUT x)
        END IF

        eatWhiteSpace(s, INOUT x)

        VAR end: Boolean := s[x] = "/"

        IF end THEN
            INC x
            eatWhiteSpace(s, INOUT x)
        END IF

        LET p: Number := x

        IF NOT isinitialnamechar(s[x]) THEN
            RAISE XmlParseException("Missing node name on line \(line) offset: \(x).")
        END IF
        INC x

        WHILE isnamechar(s[x]) DO INC x END WHILE

        VAR name: String := s[p TO x-1]

        IF end THEN
            IF name <> parent THEN
                RAISE XmlParseException("Missing closing tag: '</\(parent)>' before \"\(name)\" tag on line \(line) offset: \(x).")
            END IF

            eatWhiteSpace(s, INOUT x)

            IF s[x] <> ">" THEN
                RAISE XmlParseException("Missing closing element tag '>' on line \(line) offset: \(x).")
            END IF
            INC x
            RETURN Node(type WITH NodeType.Nothing)
        END IF

        LET attrs: Dictionary<String> := ParseAttributes(s, INOUT x)
        LET e: Node := createElement(name, attrs)

        IF s[x] = "/" THEN
            INC x

            eatWhiteSpace(s, INOUT x)

            IF s[x] <> ">" THEN
                RAISE XmlParseException("Missing closing element tag '>' on line \(line) offset: \(x).")
            END IF
            INC x
            RETURN e
        END IF

        IF s[x] <> ">" THEN
            RAISE XmlParseException("Missing closing element tag '>' on line \(line) offset: \(x).")
        END IF
        INC x

        VAR foundparent: Boolean := FALSE
        WHILE x <> s.length() DO

            eatWhiteSpace(s, INOUT x)

            LET c: Node := ParseNode(s, name, INOUT x)
            IF c.type = NodeType.Nothing THEN
                foundparent := TRUE
                EXIT WHILE
            END IF
            e.children.append(c)
        END WHILE

        IF NOT foundparent THEN
            RAISE XmlParseException("Unexpected end of file or data while parsing Xml node element.")
        END IF
        RETURN e
    ELSE
        LET p: Number := x

        WHILE (x <> s.length() AND s[x] <> "<") DO INC x END WHILE

        RETURN createText(Decode(s[p TO x-1]))
    END IF
END FUNCTION

/*
 *  Function: parse
 *
 *  Parse the given string as an Xml document.
 */
FUNCTION parse(s: String): Document
    VAR x: Number := 0
    VAR d: Document := Document()
    line := 1

    eatWhiteSpace(s, INOUT x)

    eatByteOrderMarks(s, INOUT x)

    IF s[x TO x+4] = "<?xml" THEN
        x := x + 5
        _ := ParseAttributes(s, INOUT x)
        IF s[x TO x+1] <> "?>" THEN
            RAISE XmlParseException("Malformed Xml data.  Missing document declaration tags.  Expected '?>', found \(s[x TO x+2]) on line \(line) offset: \(x).")
        END IF
        x := x + 2
    END IF

    eatWhiteSpace(s, INOUT x)

    IF s[x TO x+15] = "<?xml-stylesheet" THEN
        x := x + 16
        _ := ParseAttributes(s, INOUT x)
        IF s[x TO x+1] <> "?>" THEN
            RAISE XmlParseException("Malformed Xml processing instruction.  Expected '?>' on line \(line) offset: \(x).")
        END IF
        x := x + 2
        eatWhiteSpace(s, INOUT x)
    END IF

    eatWhiteSpace(s, INOUT x)

    IF s[x TO x+8] = "<!DOCTYPE" AND s[x+8] IN [" ", "\t", "\r", "\n"] THEN
        IF s[x+8] IN ["\r", "\n"] THEN
            INC line
        END IF
        x := x + 9

        eatWhiteSpace(s, INOUT x)

        WHILE (isnamechar(s[x])) DO INC x END WHILE

        eatWhiteSpace(s, INOUT x)

        IF s[0] <> "[" THEN
            RAISE XmlParseException("Malformed DOCTYPE tag.  Expected '[' on line \(line) offset: \(x).")
        END IF
        INC x

        WHILE TRUE DO
            eatWhiteSpace(s, INOUT x)

            IF s[x TO x+8] = "<!ELEMENT" AND isspace(s[x+9]) THEN
                x := x + 9

                eatWhiteSpace(s, INOUT x)

                WHILE isnamechar(s[x]) DO INC x END WHILE

                eatWhiteSpace(s, INOUT x)

                WHILE x <> s.length() AND s[x] <> ">" DO INC x END WHILE

                IF s[x] <> ">" THEN
                    RAISE XmlParseException("'>' expected on line \(line) offset: \(x).")
                END IF
                INC x
            ELSIF s[x TO x+8] = "<!ATTLIST" AND isspace(s[x+9]) THEN
                x := x + 9

                eatWhiteSpace(s, INOUT x)

                WHILE isnamechar(s[x]) DO INC x END WHILE

                eatWhiteSpace(s, INOUT x)

                WHILE x <> s.length() AND s[x] <> ">" DO INC x END WHILE

                IF s[x] <> ">" THEN
                    RAISE XmlParseException("'>' expected on line \(line) offset: \(x).")
                END IF
                INC x
            ELSIF s[x] = "]" THEN
                INC x
                EXIT WHILE
            ELSE
                RAISE XmlParseException("']' expected on line \(line) offset: \(x).")
            END IF
        END WHILE

        eatWhiteSpace(s, INOUT x)

        IF s[x] <> ">" THEN
            RAISE XmlParseException("'>' expected on line \(line) offset: \(x).")
        END IF

        INC x

        eatWhiteSpace(s, INOUT x)
    END IF

    IF s[x] <> "<" THEN
        RAISE XmlParseException("Malformed Xml data; Expected opening tag, instead of \(s[FIRST TO x]) on line \(line) offset: \(x).")
    END IF

    d.root := ParseNode(s, "", INOUT x)
    RETURN d
END FUNCTION

/*
 *  Function: loadFromFile
 *
 *  Loads an Xml file from disk, parses it into a <Document>, and 
 *  returns the Document.
 *
 *  Exceptions:
 *      - <FileOpenError> - if the file cannot be opened
 *      - <XmlParseException> - if the file does not contain Xml
 *        contents.
 */
FUNCTION loadFromFile(fn: String): Document
    LET xml: Bytes := file.readBytes(fn)
    RETURN parse(xml.decodeToString())
END FUNCTION

TYPE TParameter IS RECORD
    name: String
    type: String
    dir:  String
END RECORD

TYPE TFunctionCall IS RECORD
    name: String
    type: String
    parms: Array<TParameter>
END RECORD

BEGIN MAIN
    VAR d: Document := Document()
    d := loadFromFile("../data/neon-NPP.xml")
    print(d.toString())
END MAIN

FUNCTION getAttributes(n: Node, p, c: String, INOUT i: String): Array<Node>
    VAR r: Array<Node> := []
    i := i & "\t"
    VAR attrlist: Array<Node> := n.getElements(p)
    FOREACH al IN attrlist DO
        VAR attrs: Array<Node> := al.getElements(c)
        FOREACH a IN attrs DO
            --print(a.attributes["name"] & ": " & a.attributes["value"])
            --print(a.name)
            r.append(a)
        END FOREACH
        
         /* --r.extend(getAttributes(al, "attributelist", "attribute")) */
        /* FOREACH param IN al.getElements("parmlist") DO */
            /* FOREACH atl IN param.getElements("parm") DO */
                /* r.extend(getAttributes(atl, "attributelist", "attribute", INOUT i)) */
                /* --print("Adding param from paramlist, " & r[LAST].attributes["name"] & ": " & r[LAST].attributes["value"]) */
                /* --r.append(param) */
            /* END FOREACH */
        /* END FOREACH */
     END FOREACH
    RETURN r
END FUNCTION
